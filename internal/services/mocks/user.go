// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -source=user.go -destination=./mocks/user.go -package=repomock
//
// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/accumulative-loyalty-system/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockuserRepository) GetByID(ctx context.Context, id int) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockuserRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockuserRepository)(nil).GetByID), ctx, id)
}

// GetByLogin mocks base method.
func (m *MockuserRepository) GetByLogin(ctx context.Context, login string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockuserRepositoryMockRecorder) GetByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockuserRepository)(nil).GetByLogin), ctx, login)
}

// SaveUser mocks base method.
func (m *MockuserRepository) SaveUser(ctx context.Context, login, hashedPassword string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, login, hashedPassword)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockuserRepositoryMockRecorder) SaveUser(ctx, login, hashedPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockuserRepository)(nil).SaveUser), ctx, login, hashedPassword)
}

// MockbalanceActionsRepositoryForUser is a mock of balanceActionsRepositoryForUser interface.
type MockbalanceActionsRepositoryForUser struct {
	ctrl     *gomock.Controller
	recorder *MockbalanceActionsRepositoryForUserMockRecorder
}

// MockbalanceActionsRepositoryForUserMockRecorder is the mock recorder for MockbalanceActionsRepositoryForUser.
type MockbalanceActionsRepositoryForUserMockRecorder struct {
	mock *MockbalanceActionsRepositoryForUser
}

// NewMockbalanceActionsRepositoryForUser creates a new mock instance.
func NewMockbalanceActionsRepositoryForUser(ctrl *gomock.Controller) *MockbalanceActionsRepositoryForUser {
	mock := &MockbalanceActionsRepositoryForUser{ctrl: ctrl}
	mock.recorder = &MockbalanceActionsRepositoryForUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbalanceActionsRepositoryForUser) EXPECT() *MockbalanceActionsRepositoryForUserMockRecorder {
	return m.recorder
}

// GetCurrentBalance mocks base method.
func (m *MockbalanceActionsRepositoryForUser) GetCurrentBalance(ctx context.Context, userID int) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBalance", ctx, userID)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetCurrentBalance indicates an expected call of GetCurrentBalance.
func (mr *MockbalanceActionsRepositoryForUserMockRecorder) GetCurrentBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBalance", reflect.TypeOf((*MockbalanceActionsRepositoryForUser)(nil).GetCurrentBalance), ctx, userID)
}

// GetWithdrawalAmount mocks base method.
func (m *MockbalanceActionsRepositoryForUser) GetWithdrawalAmount(ctx context.Context, userID int) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalAmount", ctx, userID)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetWithdrawalAmount indicates an expected call of GetWithdrawalAmount.
func (mr *MockbalanceActionsRepositoryForUserMockRecorder) GetWithdrawalAmount(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalAmount", reflect.TypeOf((*MockbalanceActionsRepositoryForUser)(nil).GetWithdrawalAmount), ctx, userID)
}
