// Code generated by MockGen. DO NOT EDIT.
// Source: good_rewards.go
//
// Generated by this command:
//
//	mockgen -source=good_rewards.go -destination=./mocks/good_rewards.go -package=repomock
//
// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/accumulative-loyalty-system/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockgoodRewardRepository is a mock of goodRewardRepository interface.
type MockgoodRewardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockgoodRewardRepositoryMockRecorder
}

// MockgoodRewardRepositoryMockRecorder is the mock recorder for MockgoodRewardRepository.
type MockgoodRewardRepositoryMockRecorder struct {
	mock *MockgoodRewardRepository
}

// NewMockgoodRewardRepository creates a new mock instance.
func NewMockgoodRewardRepository(ctrl *gomock.Controller) *MockgoodRewardRepository {
	mock := &MockgoodRewardRepository{ctrl: ctrl}
	mock.recorder = &MockgoodRewardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgoodRewardRepository) EXPECT() *MockgoodRewardRepositoryMockRecorder {
	return m.recorder
}

// SaveReward mocks base method.
func (m *MockgoodRewardRepository) SaveReward(ctx context.Context, match string, reward float64, rewardType string) (*domain.GoodReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveReward", ctx, match, reward, rewardType)
	ret0, _ := ret[0].(*domain.GoodReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveReward indicates an expected call of SaveReward.
func (mr *MockgoodRewardRepositoryMockRecorder) SaveReward(ctx, match, reward, rewardType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveReward", reflect.TypeOf((*MockgoodRewardRepository)(nil).SaveReward), ctx, match, reward, rewardType)
}
