// Code generated by MockGen. DO NOT EDIT.
// Source: accrual_orders.go
//
// Generated by this command:
//
//	mockgen -source=accrual_orders.go -destination=./mocks/accrual_orders.go -package=repomock
//
// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/accumulative-loyalty-system/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockregisteredOrdersRepository is a mock of registeredOrdersRepository interface.
type MockregisteredOrdersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockregisteredOrdersRepositoryMockRecorder
}

// MockregisteredOrdersRepositoryMockRecorder is the mock recorder for MockregisteredOrdersRepository.
type MockregisteredOrdersRepositoryMockRecorder struct {
	mock *MockregisteredOrdersRepository
}

// NewMockregisteredOrdersRepository creates a new mock instance.
func NewMockregisteredOrdersRepository(ctrl *gomock.Controller) *MockregisteredOrdersRepository {
	mock := &MockregisteredOrdersRepository{ctrl: ctrl}
	mock.recorder = &MockregisteredOrdersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockregisteredOrdersRepository) EXPECT() *MockregisteredOrdersRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockregisteredOrdersRepository) GetByID(ctx context.Context, orderID string) (*domain.RegisteredOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, orderID)
	ret0, _ := ret[0].(*domain.RegisteredOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockregisteredOrdersRepositoryMockRecorder) GetByID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockregisteredOrdersRepository)(nil).GetByID), ctx, orderID)
}

// RegisterOrder mocks base method.
func (m *MockregisteredOrdersRepository) RegisterOrder(ctx context.Context, orderID string, goods []domain.OrderGood) (*domain.RegisteredOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrder", ctx, orderID, goods)
	ret0, _ := ret[0].(*domain.RegisteredOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOrder indicates an expected call of RegisterOrder.
func (mr *MockregisteredOrdersRepositoryMockRecorder) RegisterOrder(ctx, orderID, goods any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrder", reflect.TypeOf((*MockregisteredOrdersRepository)(nil).RegisterOrder), ctx, orderID, goods)
}
