// Code generated by MockGen. DO NOT EDIT.
// Source: orders.go
//
// Generated by this command:
//
//	mockgen -source=orders.go -destination=./mocks/orders.go -package=repomock
//
// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/accumulative-loyalty-system/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockuserOrderRepository is a mock of userOrderRepository interface.
type MockuserOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserOrderRepositoryMockRecorder
}

// MockuserOrderRepositoryMockRecorder is the mock recorder for MockuserOrderRepository.
type MockuserOrderRepositoryMockRecorder struct {
	mock *MockuserOrderRepository
}

// NewMockuserOrderRepository creates a new mock instance.
func NewMockuserOrderRepository(ctrl *gomock.Controller) *MockuserOrderRepository {
	mock := &MockuserOrderRepository{ctrl: ctrl}
	mock.recorder = &MockuserOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserOrderRepository) EXPECT() *MockuserOrderRepositoryMockRecorder {
	return m.recorder
}

// GetByOrderID mocks base method.
func (m *MockuserOrderRepository) GetByOrderID(ctx context.Context, orderID string) (*domain.UserOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderID", ctx, orderID)
	ret0, _ := ret[0].(*domain.UserOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderID indicates an expected call of GetByOrderID.
func (mr *MockuserOrderRepositoryMockRecorder) GetByOrderID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderID", reflect.TypeOf((*MockuserOrderRepository)(nil).GetByOrderID), ctx, orderID)
}

// GetByUserID mocks base method.
func (m *MockuserOrderRepository) GetByUserID(ctx context.Context, userID int) ([]domain.UserOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.UserOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockuserOrderRepositoryMockRecorder) GetByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockuserOrderRepository)(nil).GetByUserID), ctx, userID)
}

// SaveOrder mocks base method.
func (m *MockuserOrderRepository) SaveOrder(ctx context.Context, orderID string, userID int) (*domain.UserOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, orderID, userID)
	ret0, _ := ret[0].(*domain.UserOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockuserOrderRepositoryMockRecorder) SaveOrder(ctx, orderID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockuserOrderRepository)(nil).SaveOrder), ctx, orderID, userID)
}
