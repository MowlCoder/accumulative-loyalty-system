// Code generated by MockGen. DO NOT EDIT.
// Source: withdrawals.go
//
// Generated by this command:
//
//	mockgen -source=withdrawals.go -destination=./mocks/withdrawals.go -package=repomock
//
// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/accumulative-loyalty-system/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockbalanceActionRepository is a mock of balanceActionRepository interface.
type MockbalanceActionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockbalanceActionRepositoryMockRecorder
}

// MockbalanceActionRepositoryMockRecorder is the mock recorder for MockbalanceActionRepository.
type MockbalanceActionRepositoryMockRecorder struct {
	mock *MockbalanceActionRepository
}

// NewMockbalanceActionRepository creates a new mock instance.
func NewMockbalanceActionRepository(ctrl *gomock.Controller) *MockbalanceActionRepository {
	mock := &MockbalanceActionRepository{ctrl: ctrl}
	mock.recorder = &MockbalanceActionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbalanceActionRepository) EXPECT() *MockbalanceActionRepositoryMockRecorder {
	return m.recorder
}

// GetCurrentBalance mocks base method.
func (m *MockbalanceActionRepository) GetCurrentBalance(ctx context.Context, userID int) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBalance", ctx, userID)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetCurrentBalance indicates an expected call of GetCurrentBalance.
func (mr *MockbalanceActionRepositoryMockRecorder) GetCurrentBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBalance", reflect.TypeOf((*MockbalanceActionRepository)(nil).GetCurrentBalance), ctx, userID)
}

// GetUserWithdrawals mocks base method.
func (m *MockbalanceActionRepository) GetUserWithdrawals(ctx context.Context, userID int) ([]domain.BalanceAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]domain.BalanceAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockbalanceActionRepositoryMockRecorder) GetUserWithdrawals(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockbalanceActionRepository)(nil).GetUserWithdrawals), ctx, userID)
}

// Save mocks base method.
func (m *MockbalanceActionRepository) Save(ctx context.Context, userID int, orderID string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, userID, orderID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockbalanceActionRepositoryMockRecorder) Save(ctx, userID, orderID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockbalanceActionRepository)(nil).Save), ctx, userID, orderID, amount)
}
