// Code generated by MockGen. DO NOT EDIT.
// Source: accrual_orders.go
//
// Generated by this command:
//
//	mockgen -source=accrual_orders.go -destination=./mocks/accrual_orders.go -package=servicemock
//
// Package servicemock is a generated GoMock package.
package servicemock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/accumulative-loyalty-system/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockaccrualOrdersService is a mock of accrualOrdersService interface.
type MockaccrualOrdersService struct {
	ctrl     *gomock.Controller
	recorder *MockaccrualOrdersServiceMockRecorder
}

// MockaccrualOrdersServiceMockRecorder is the mock recorder for MockaccrualOrdersService.
type MockaccrualOrdersServiceMockRecorder struct {
	mock *MockaccrualOrdersService
}

// NewMockaccrualOrdersService creates a new mock instance.
func NewMockaccrualOrdersService(ctrl *gomock.Controller) *MockaccrualOrdersService {
	mock := &MockaccrualOrdersService{ctrl: ctrl}
	mock.recorder = &MockaccrualOrdersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccrualOrdersService) EXPECT() *MockaccrualOrdersServiceMockRecorder {
	return m.recorder
}

// GetOrderInfo mocks base method.
func (m *MockaccrualOrdersService) GetOrderInfo(ctx context.Context, orderID string) (*domain.RegisteredOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderInfo", ctx, orderID)
	ret0, _ := ret[0].(*domain.RegisteredOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderInfo indicates an expected call of GetOrderInfo.
func (mr *MockaccrualOrdersServiceMockRecorder) GetOrderInfo(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderInfo", reflect.TypeOf((*MockaccrualOrdersService)(nil).GetOrderInfo), ctx, orderID)
}

// RegisterOrder mocks base method.
func (m *MockaccrualOrdersService) RegisterOrder(ctx context.Context, orderID string, goods []domain.OrderGood) (*domain.RegisteredOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrder", ctx, orderID, goods)
	ret0, _ := ret[0].(*domain.RegisteredOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOrder indicates an expected call of RegisterOrder.
func (mr *MockaccrualOrdersServiceMockRecorder) RegisterOrder(ctx, orderID, goods any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrder", reflect.TypeOf((*MockaccrualOrdersService)(nil).RegisterOrder), ctx, orderID, goods)
}
