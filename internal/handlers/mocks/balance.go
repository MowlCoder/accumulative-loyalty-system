// Code generated by MockGen. DO NOT EDIT.
// Source: balance.go
//
// Generated by this command:
//
//	mockgen -source=balance.go -destination=./mocks/balance.go -package=servicemock
//
// Package servicemock is a generated GoMock package.
package servicemock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/accumulative-loyalty-system/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockuserServiceForBalance is a mock of userServiceForBalance interface.
type MockuserServiceForBalance struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceForBalanceMockRecorder
}

// MockuserServiceForBalanceMockRecorder is the mock recorder for MockuserServiceForBalance.
type MockuserServiceForBalanceMockRecorder struct {
	mock *MockuserServiceForBalance
}

// NewMockuserServiceForBalance creates a new mock instance.
func NewMockuserServiceForBalance(ctrl *gomock.Controller) *MockuserServiceForBalance {
	mock := &MockuserServiceForBalance{ctrl: ctrl}
	mock.recorder = &MockuserServiceForBalanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserServiceForBalance) EXPECT() *MockuserServiceForBalanceMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockuserServiceForBalance) GetUserBalance(ctx context.Context, userID int) (*domain.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(*domain.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockuserServiceForBalanceMockRecorder) GetUserBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockuserServiceForBalance)(nil).GetUserBalance), ctx, userID)
}

// MockwithdrawalServiceForBalance is a mock of withdrawalServiceForBalance interface.
type MockwithdrawalServiceForBalance struct {
	ctrl     *gomock.Controller
	recorder *MockwithdrawalServiceForBalanceMockRecorder
}

// MockwithdrawalServiceForBalanceMockRecorder is the mock recorder for MockwithdrawalServiceForBalance.
type MockwithdrawalServiceForBalanceMockRecorder struct {
	mock *MockwithdrawalServiceForBalance
}

// NewMockwithdrawalServiceForBalance creates a new mock instance.
func NewMockwithdrawalServiceForBalance(ctrl *gomock.Controller) *MockwithdrawalServiceForBalance {
	mock := &MockwithdrawalServiceForBalance{ctrl: ctrl}
	mock.recorder = &MockwithdrawalServiceForBalanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwithdrawalServiceForBalance) EXPECT() *MockwithdrawalServiceForBalanceMockRecorder {
	return m.recorder
}

// GetWithdrawalsHistory mocks base method.
func (m *MockwithdrawalServiceForBalance) GetWithdrawalsHistory(ctx context.Context, userID int) ([]domain.BalanceAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsHistory", ctx, userID)
	ret0, _ := ret[0].([]domain.BalanceAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsHistory indicates an expected call of GetWithdrawalsHistory.
func (mr *MockwithdrawalServiceForBalanceMockRecorder) GetWithdrawalsHistory(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsHistory", reflect.TypeOf((*MockwithdrawalServiceForBalance)(nil).GetWithdrawalsHistory), ctx, userID)
}

// WithdrawBalance mocks base method.
func (m *MockwithdrawalServiceForBalance) WithdrawBalance(ctx context.Context, userID int, orderID string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawBalance", ctx, userID, orderID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawBalance indicates an expected call of WithdrawBalance.
func (mr *MockwithdrawalServiceForBalanceMockRecorder) WithdrawBalance(ctx, userID, orderID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawBalance", reflect.TypeOf((*MockwithdrawalServiceForBalance)(nil).WithdrawBalance), ctx, userID, orderID, amount)
}
