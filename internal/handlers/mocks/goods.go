// Code generated by MockGen. DO NOT EDIT.
// Source: goods.go
//
// Generated by this command:
//
//	mockgen -source=goods.go -destination=./mocks/goods.go -package=servicemock
//
// Package servicemock is a generated GoMock package.
package servicemock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/accumulative-loyalty-system/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockgoodRewardsService is a mock of goodRewardsService interface.
type MockgoodRewardsService struct {
	ctrl     *gomock.Controller
	recorder *MockgoodRewardsServiceMockRecorder
}

// MockgoodRewardsServiceMockRecorder is the mock recorder for MockgoodRewardsService.
type MockgoodRewardsServiceMockRecorder struct {
	mock *MockgoodRewardsService
}

// NewMockgoodRewardsService creates a new mock instance.
func NewMockgoodRewardsService(ctrl *gomock.Controller) *MockgoodRewardsService {
	mock := &MockgoodRewardsService{ctrl: ctrl}
	mock.recorder = &MockgoodRewardsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgoodRewardsService) EXPECT() *MockgoodRewardsServiceMockRecorder {
	return m.recorder
}

// SaveNewGoodReward mocks base method.
func (m *MockgoodRewardsService) SaveNewGoodReward(ctx context.Context, match string, reward float64, rewardType string) (*domain.GoodReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNewGoodReward", ctx, match, reward, rewardType)
	ret0, _ := ret[0].(*domain.GoodReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveNewGoodReward indicates an expected call of SaveNewGoodReward.
func (mr *MockgoodRewardsServiceMockRecorder) SaveNewGoodReward(ctx, match, reward, rewardType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewGoodReward", reflect.TypeOf((*MockgoodRewardsService)(nil).SaveNewGoodReward), ctx, match, reward, rewardType)
}
