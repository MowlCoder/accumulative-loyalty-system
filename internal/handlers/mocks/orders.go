// Code generated by MockGen. DO NOT EDIT.
// Source: orders.go
//
// Generated by this command:
//
//	mockgen -source=orders.go -destination=./mocks/orders.go -package=servicemock
//
// Package servicemock is a generated GoMock package.
package servicemock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/accumulative-loyalty-system/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockordersService is a mock of ordersService interface.
type MockordersService struct {
	ctrl     *gomock.Controller
	recorder *MockordersServiceMockRecorder
}

// MockordersServiceMockRecorder is the mock recorder for MockordersService.
type MockordersServiceMockRecorder struct {
	mock *MockordersService
}

// NewMockordersService creates a new mock instance.
func NewMockordersService(ctrl *gomock.Controller) *MockordersService {
	mock := &MockordersService{ctrl: ctrl}
	mock.recorder = &MockordersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockordersService) EXPECT() *MockordersServiceMockRecorder {
	return m.recorder
}

// GetUserOrders mocks base method.
func (m *MockordersService) GetUserOrders(ctx context.Context, userID int) ([]domain.UserOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, userID)
	ret0, _ := ret[0].([]domain.UserOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockordersServiceMockRecorder) GetUserOrders(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockordersService)(nil).GetUserOrders), ctx, userID)
}

// RegisterOrder mocks base method.
func (m *MockordersService) RegisterOrder(ctx context.Context, orderID string, userID int) (*domain.UserOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrder", ctx, orderID, userID)
	ret0, _ := ret[0].(*domain.UserOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOrder indicates an expected call of RegisterOrder.
func (mr *MockordersServiceMockRecorder) RegisterOrder(ctx, orderID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrder", reflect.TypeOf((*MockordersService)(nil).RegisterOrder), ctx, orderID, userID)
}
