// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -source=auth.go -destination=./mocks/auth.go -package=servicemock
//
// Package servicemock is a generated GoMock package.
package servicemock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/accumulative-loyalty-system/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockuserServiceForAuth is a mock of userServiceForAuth interface.
type MockuserServiceForAuth struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceForAuthMockRecorder
}

// MockuserServiceForAuthMockRecorder is the mock recorder for MockuserServiceForAuth.
type MockuserServiceForAuthMockRecorder struct {
	mock *MockuserServiceForAuth
}

// NewMockuserServiceForAuth creates a new mock instance.
func NewMockuserServiceForAuth(ctrl *gomock.Controller) *MockuserServiceForAuth {
	mock := &MockuserServiceForAuth{ctrl: ctrl}
	mock.recorder = &MockuserServiceForAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserServiceForAuth) EXPECT() *MockuserServiceForAuthMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockuserServiceForAuth) Auth(ctx context.Context, login, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, login, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockuserServiceForAuthMockRecorder) Auth(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockuserServiceForAuth)(nil).Auth), ctx, login, password)
}

// Register mocks base method.
func (m *MockuserServiceForAuth) Register(ctx context.Context, login, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, login, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockuserServiceForAuthMockRecorder) Register(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockuserServiceForAuth)(nil).Register), ctx, login, password)
}
